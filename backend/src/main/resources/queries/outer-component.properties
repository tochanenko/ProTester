saveCompound= \
  INSERT INTO compounds(compound_name, compound_description) \
  VALUES (:name, :description)

saveTestScenario= \
  INSERT INTO tests_scenarios(scenario_name, scenario_description) \
  VALUES (:name, :description)

countCompounds= \
  SELECT count(*) \
  FROM compounds \
  WHERE compound_name LIKE :filterName

countTestScenarios= \
  SELECT count(*) \
  FROM tests_scenarios \
  WHERE scenario_name LIKE :filterName

findAllCompounds= \
  SELECT compound_id as id, compound_name as name, compound_description as description \
  FROM compounds \
  WHERE compound_name LIKE :filterName \
  ORDER BY compound_id DESC \
  LIMIT :pageSize \
  OFFSET :offset

findAllTestScenarios= \
  SELECT scenario_id as id, scenario_name as name, scenario_description as description \
  FROM tests_scenarios \
  WHERE scenario_name LIKE :filterName \
  ORDER BY scenario_id DESC \
  LIMIT :pageSize \
  OFFSET :offset

findCompoundById= \
  SELECT compound_id as id, compound_name as name, compound_description as description \
  FROM compounds \
  WHERE compound_id=:id

findTestScenarioById= \
  SELECT scenario_id as id, scenario_name as name, scenario_description as description \
  FROM tests_scenarios \
  WHERE scenario_id=:id

saveStep= \
  INSERT INTO steps(outer_is_compound, outer_compound_id, outer_test_scenario_id, inner_is_action, inner_action_id, inner_compound_id, step_order) \
  VALUES (:outerIsCompound, :outerCompoundId, :outerTestScenarioId, :innerIsAction, :innerActionId, :innerCompoundId, :stepOrder)

findAllCompoundStepsById= \
  SELECT step_id as id, inner_is_action as isAction, inner_action_id as actionId, inner_compound_id as compoundId \
  FROM steps \
  WHERE outer_compound_id=:id \
  ORDER BY step_order

findAllTestScenarioStepsById= \
  SELECT step_id as id, inner_is_action as isAction, inner_action_id as actionId, inner_compound_id as compoundId \
  FROM steps \
  WHERE outer_test_scenario_id=:id \
  ORDER BY step_order

findAllCompoundStepsByIdResult= \
  SELECT step_id as id, inner_is_action as isAction, inner_action_id as actionId, inner_compound_id as compoundId \
  FROM steps \
  WHERE outer_compound_id=:id and inner_is_action = true \
  ORDER BY step_order

findAllTestScenarioStepsByIdResult= \
  SELECT step_id as id, inner_is_action as isAction, inner_action_id as actionId, inner_compound_id as compoundId \
  FROM steps \
  WHERE outer_test_scenario_id=:id and inner_is_action = true \
  ORDER BY step_order


findCompoundIdWhenItIsNotTestScenario= \
  SELECT inner_compound_id as compoundId \
  FROM steps \
  WHERE outer_test_scenario_id=:id

findOuterComponentsByInnerCompoundId= \
  SELECT DISTINCT \
    CASE \
        WHEN NOT a.outer_is_compound \
            THEN a.outer_test_scenario_id \
            ELSE a.outer_compound_id \
    END as id, \
    CASE \
        WHEN NOT a.outer_is_compound \
            THEN c.scenario_name \
            ELSE b.compound_name \
    END as name, \
    a.outer_is_compound as compound \
  FROM steps as a \
  LEFT JOIN compounds as b on a.outer_compound_id = b.compound_id \
  LEFT JOIN tests_scenarios as c on a.outer_test_scenario_id = c.scenario_id \
  WHERE inner_compound_id = :id;


deleteCompoundById= \
  DELETE FROM compounds \
  WHERE compound_id=:id

deleteTestScenarioById= \
  DELETE FROM tests_scenarios \
  WHERE scenario_id=:id

updateCompound= \
  UPDATE compounds \
  SET compound_name=:name, compound_description=:description \
  WHERE compound_id=:id;

updateTestScenario= \
  UPDATE tests_scenarios \
  SET scenario_name=:name, scenario_description=:description \
  WHERE scenario_id=:id;

deleteStepsByCompoundId= \
  DELETE FROM steps \
  WHERE outer_compound_id=:id

deleteStepsByTestScenarioId= \
  DELETE FROM steps \
  WHERE outer_test_scenario_id=:id
